<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gaia.WebWidgets.Extensions</name>
    </assembly>
    <members>
        <member name="T:Gaia.WebWidgets.Extensions.ExtendedPanelCollection">
            <summary>
            Represents a collection of ExtendedPanels. Used in e.g. Accordion.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedPanelCollection.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.Calendar">
            <summary>
            The %Calendar allows the user to select a certain date and time
            The Gaia Ajax %Calendar is similar to the DateTimePicker except it is directly embedded in the page (no drop down). It is
            extremely easy and flexible to use. For example, localization is done on the server, meaning you have every localization 
            option you have in the .Net Framework. It is also very lightweight and has very little custom JavaScript written to make 
            it work. It integrates perfectly with ASP.NET and is of course a 100% Ajax Citizen.
            <br/>
            </summary>
            <example>
            <code title="ASPX Markup for Calendar" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\Calendar\Overview\Default.aspx"/>
            </code> 
            <code title="Codebehind for Calendar" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\Calendar\Overview\Default.aspx.cs"/>
            </code> 
            </example>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.OnInit(System.EventArgs)">
            <summary>
            Initializing the Calendar
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.InitializeResources">
            <summary>
            Since we don't want to new up the resource manager on every single callback we initialize
            the fields we require once 
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based 
            implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.OnLoad(System.EventArgs)">
            <summary>
            Overriden to ensure child controls in this composition control. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the DateTimePicker
            </summary>
            <param name="create">XhtmlTagFactory to render into</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.IncludeScriptFiles">
            <summary>
            Include Calendar Javascript files
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.RenderMonthAndYearPicker(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the Month and Year picker that rolls down where the user can select a month and year
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.RenderDateTimePicker(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the core Calendar control wrapper that goes all around the calendar
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.RenderCalendarBottom(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the bottom of the Calendar control
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.CreateCenter(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the center of the calendar control with the day matrix. This area is re-rendered from the server
            using forceUpdate if you set the private _updateInnerContent property to true.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.CreateCenterHeaders(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the center headers of the calendar control with localized abbreviations for each day
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.CreateTop(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the Calendar top with month navigation and current month and year button.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.CombineCssClass(System.String[])">
            <summary>
            Combines given strings together with the current CssClass of the control
            </summary>
            <param name="cssclass"></param>
            <returns></returns>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Calendar.InjectPropertyChangesToCallbackResponse(System.Text.StringBuilder)">
            <summary>
            Implementation of your custom rendering. This expects to be in the form of; 
            ".foo(x)" where the foo method on the client MUST return the this argument.
            If this method returns nothing, nothing will be rendered unless other things 
            are having rendering output.
            </summary>
            <param name="code">An already built StringBuilder which you're supposed to render your data into</param>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Calendar.CloseCalendarClicked">
            <summary>
            This event is dispatched when the Close Calendar button is clicked. This button is only
            made visible if the ShowCloseButton is set to true. 
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Calendar.SelectedDateChanged">
            <summary>
            The SelectedDateChanged Event fires when the Selected Date Changes either
            directly by the user or programatically. 
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Calendar.ActiveDateViewChanged">
            <summary>
            The Active Date View is changed. This event is triggered when the currently
            displayed month is re-rendered and a different month is displayed in the content area.
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Calendar.CalendarDayClicked">
            <summary>
            The CalendarDayClicked event is fired when a user clicks a specific day in the
            calendar and allows you to change the date before it's actually set.
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Calendar.DayRender">
            <summary>
            The DayRender event is fired for each DayTag that is created and allows you to 
            add custom CssClasses to each cell. 
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Calendar.TodayButtonClicked">
            <summary>
            This event is fired if the client clicks the Today button. 
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Calendar.CalendarDayClicking">
            <summary>
            This event is forwarded just before the selection of a date occurs. You can subscribe
            to this event if you want to disallow selection of this date by setting the AllowSelection
            property to false
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.Width">
            <summary>
            Calendar Width.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.Culture">
            <summary>
            Get or Set the current Culture that will be used to render the calendar. 
            If not set it will return default Page Culture. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.ShowCloseButton">
            <summary>
            Specify wheter the Calendar should render the Close Calendar button or not. Clicking the Close button will
            not close the Calendar, but dispatch the CloseCalendarClicked event. You can subscribe to this event in your
            custom code to specify a custom action.  
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.FirstDayOfWeek">
            <summary>
            Specify which Date will be the first day displayed in the Calendar. By default this is Sunday. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.Format">
            <summary>
            Basically the format from which the control should render its date in.
            It basically only supports yyyy for years, MM for months, dd for days, HH for hours in military format and mm for minutes.
            You cannot use long date formats like February or similar.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.AnimationDuration">
            <summary>
            Duration of animation when shifting from expanded to collapsed mode
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.CssClass">
            <summary>
            The cssclass for the Calendar control.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.VisibleDate">
            <summary>
            The VisibleDate property is used to change the monthView. It allows you to change month and year 
            without having to change the SelectedDate property.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.SelectedDate">
            <summary>
            Gets or sets the SelectedDate for the Calendar control
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.Calendar.CalendarDayClickingEventArgs">
            <summary>
            EventArgs for the CalendarDayClicking event. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.CalendarDayClickingEventArgs.ClickedDate">
            <summary>
            The Date that the user clicked in the Calendar
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.CalendarDayClickingEventArgs.AllowSelection">
            <summary>
            If you specify false, the date selection will not be performed. 
            Default value is true. 
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.Calendar.DayRenderEventArgs">
            <summary>
            EventArgs used in DayRenderEventArgs
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.DayRenderEventArgs.DayCssClass">
            <summary>
            Specify your custom CssClass for the Cell of this given day
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Calendar.DayRenderEventArgs.CalendarDay">
            <summary>
            Returns the currently rendering CalendarDay 
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.ControlPicker">
            <summary>
            The ControlPicker is a flexible control that allows you to render any ChildControl and
            select one/multiple instances of the control from client-side. Can be used as building block
            for flexible ListBox, ExtendedComboBox, Autocompleter, etc...
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ControlPicker.RenderChildren(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overridden to make sure ComboList is rendered
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ControlPicker.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Render ControlPicker
            </summary>
            <param name="create"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ControlPicker.IncludeScriptFiles">
            <summary>
            Include ControlPicker Javascript files
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ControlPicker.HoverSelection">
            <summary>
            Define wheter you want to highlight items in the ControlPicker. Is useful
            for usage in controls that have ComboBox simliar functionality ...
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ControlPicker.SelectionMode">
            <summary>
            Set the ControlPicker in Single or Multiple Selection Mode
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ControlPicker.InputElementForKeyPressNavigation">
            <summary>
            You can set this property to the ClientID of an input element and it will be
            used for up/down navigation and selection of items (with ENTER).
            HoverSelection must be set to true for the event handling to be wired up...
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ControlPicker.SelectedIndexes">
            <summary>
            Currently selected indexes
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ControlPicker.SelectedValues">
            <summary>
            Enumerates over the list of Selected Controls in the ControlPicker
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.ControlPicker.SelectedIndexChanged">
            <summary>
            SelectedIndexChanged Event is fired when there's a change to the SelectedIndex value
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.ControlPicker.ItemSelectionMode">
            <summary>
            Enum used to Control the Selection Behaviour of the ControlPicker. 
            Can be set to either single/multiple selection mode ...
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.ControlPicker.ItemSelectionMode.Single">
            <summary>
            Only one Item can be Selected at any given time ...
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.ControlPicker.ItemSelectionMode.Multiple">
            <summary>
            Multiple Items can be selected/deselected at any given time
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.ControlPicker.ControlPickerRenderControlItemEventArgs">
            <summary>
            EventArgs forwarded on every rendering of a Control in the ControlPicker
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ControlPicker.ControlPickerRenderControlItemEventArgs.XhtmlTagFactory">
            <summary>
            The XhtmlTagFactory for writing xhtml compliant code
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ControlPicker.ControlPickerRenderControlItemEventArgs.Control">
            <summary>
            The currently rendering control
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.TreeViewItemCollection">
            <summary>
            Specialized collection of TreeViewItems, used in TreeView and TreeViewItem
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItemCollection.#ctor(System.Web.UI.Control)">
            <summary>
            Creates an instance of the class with the "owning widget" as a parameter
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItemCollection.GetEnumerator">
            <summary>
            Strongly typed enumeration over the items in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.TreeViewItem">
            <summary>
            Represents one item in a TreeView. Inside the TreeViewItem you can add any controls you wish.
            </summary>
            <example>
            <code title="ASPX Markup for TreeViewItem" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\TreeView\Overview\Default.aspx"/>
            </code> 
            </example>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.ApplyToContent``1(``0)">
            <summary>
            Use this function to apply an effect to the content area of the TreeViewItem
            </summary>
            <typeparam name="T">Any Effect</typeparam>
            <param name="effect">The Effect to apply modifications to</param>
            <returns>The effect itself. Don't forget to add the effect to the Window effects collection</returns>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.Collapse">
            <summary>
            Programatically Collapse a TreeViewItem in callbacks. This function is not 
            recursive meaning that it will only apply to this particular item. 
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.Expand">
            <summary>
            Programmatically Expand a TreeViewItem in callbacks. This function is not
            recursive meaning that it will only apply to this particular item. 
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.ForceAnUpdate">
            <summary>
            Implementation of ForceAnUpdate (which re-renderes every child control of TreeViewItem)
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.ForceAnUpdateWithAppending">
            <summary>
            Implementation of ForceAnUpdateWithAppending which basically just appends newly added controls 
            into the TreeViewItem
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.TrackControlAdditions">
            <summary>
            Start Tracking New Controls to the Control Collection. These will be rendered during ForceAnUpdate or
            ForceAnUpdateWithAppending
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.AddedControl(System.Web.UI.Control,System.Int32)">
            <summary>
            Called after a child control is added to the Controls collection
            </summary>
            <param name="control">The Control that was added</param>
            <param name="index">The index of Control in the collection</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.LoadViewState(System.Object)">
            <summary>
            Load ViewState for this control. Also Initializes Dynamic Control Children.
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overridden to render "li" element instead of "span" element in cases of in-visibility
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.IncludeScriptFiles">
            <summary>
            Include TreeViewItem Javascript files
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeViewItem.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Overridden from GaiaControl to render the specific TreeViewItem HTML
            </summary>
            <param name="create">XhtmlTagFactory to render into</param>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.EffectEventExpand">
            <summary>
            Use this EffectEvent to wire up the effect when the TreeViewItem is expanding
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.EffectEventCollapse">
            <summary>
            Use this EffectEvent to wire up the effect when the TreeViewItem is collapsing
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.TreeViewItem.GetChildrenControls">
            <summary>
            Fired when node needs to display its children and those are not yet loaded to the client
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.TreeViewItem.Toggled">
            <summary>
            Fired when item it either collapsed or expanded for child TreeViewItems
            Read the Collapsed property to see which it is.
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.TreeViewItem.MouseOver">
            <summary>
            Event is triggered when the Mouse cursor is moved over the control
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.TreeViewItem.MouseOut">
            <summary>
            Event is triggered when the Mouse cursor is moved outside of the control
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.CssClass">
            <summary>
            Since we don't want to inherit from GaiaWebControl (which inherits from WebControl) sinc ethat'll drag a 
            LOT of more StateUtil around we implement ONLY the properties we actualy NEEDS from WebControl. CssClass
            being one of those.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.IconCssClass">
            <summary>
            CssClass for the Icon of the TreeView
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.Collapsed">
            <summary>
            If true, node is rendered COLLAPSED initially (but still RENDERS HTML on the client) which might be useful
            for large TreeView hierarchies where you still want everything on the CLIENT for e.g. SEO purposes and similar
            constructs.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.IsLeaf">
            <summary>
            If true this node is defined to be a leaf which means it'll not be possible to "expand" and no
            "expand element" will be rendered for it.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.AnimateToggling">
            <summary>
            If true (defaults to true) then nodes will be "animated" up and down on the client-side
            when expanded and collapsed. If this value is not explicitly set for the %TreeViewItem
            then the default set value of the TreeView will be used. The default of both of these
            values are true.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.TreeViewItems">
            <summary>
            This collection contains all the Child TreeViewItems in this TreeViewItem. Use this collection instead
            of the Controls collection to access your TreeViewItems. It's safe to call AddAt, RemoveAt and Clear on 
            this controls collection. If you need to access your custom user defined controls on the TreeViewItem
            use the ChildControls collection instead. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.ChildControls">
            <summary>
            This collection contains all your user defined controls and not the child TreeViewItems. This control works as 
            an abstraction on top of the Controls collection, but you should use this collection instead for secure access.
            If you need to access your TreeViewItems please use the TreeViewItems collection.  
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.Aspects">
            <summary>
            See AspectableAjaxControl.Aspects for documentation for this method
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.Effects">
            <summary>
            Collection of Effects for the Control. 
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.TreeViewItem.GetChildrenControlsEventArgs">
            <summary>
            EventArgs fired when TreeViewItem needs to fetch the TreeViewItem children
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeViewItem.GetChildrenControlsEventArgs.Node">
            <summary>
            The TreeViewItem node the children request is for
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.ToolbarItemCollection">
            <summary>
            Specialized collection class used in Toolbar class and ToolbarItem to track TobarItems typed.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ToolbarItemCollection.#ctor(System.Web.UI.Control)">
            <summary>
            Creates an instance of the collection class
            </summary>
            <param name="owner">Owner control</param>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.TabControl">
            <summary>
            The TabControl extends Gaia Panel and maintains a collection of TabViews where only one Tab is visible at the time.
            The Gaia Ajax TabControl is extremely flexible in regards to skinning and usage. You can use it completely without 
            any JavaScript knowledge at all. All you need to do is create it declaratively in your ASP.NET .ASPX code file, choose
            your skin and start adding code for its event handlers.
            </summary>
            <example>
            <code title="ASPX Markup for TabControl" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\TabControl\Overview\Default.aspx"/>
            </code> 
            </example>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TabControl.SetPreRenderDefaults">
            <summary>
            Base implementation does nothing.
            specifies default values for setting during OnPreRender event
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TabControl.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the HTML TabControl
            </summary>
            <param name="create">Writer to render HTML into</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TabControl.OnLoad(System.EventArgs)">
            <summary>
            Overridden to keep track of active tab view index
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TabControl.OnPreRender(System.EventArgs)">
            <summary>
            Last minute settings before rendering
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TabControl.CreateControlCollection">
            <summary>
            Create the TabControl controls collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TabControl.IncludeScriptFiles">
            <summary>
            Include TabControl Javascript files
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TabControl.Gaia#WebWidgets#IExtraPropertyCallbackRenderer#InjectPropertyChangesToCallbackResponse(System.Text.StringBuilder)">
            <summary>
            Implementation of your custom rendering. This expects to be in the form of; 
            ".foo(x)" where the foo method on the client MUST return the this argument.
            If this method returns nothing, nothing will be rendered unless other things 
            are having rendering output.
            </summary>
            <param name="code">An already built StringBuilder which you're supposed to render your data into</param>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.TabControl.ActiveTabViewIndexChanged">
            <summary>
            The ActiveViewIndexChanged fires when the user selects a different tab in the TabControl
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TabControl.ActiveTabViewIndex">
            <summary>
            The Currently Active TabView Index
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TabControl.ForceDynamicRendering">
            <summary>
            If set to true, Gaia will only have the ActiveTab visible in the DOM.
            If set to false, The TabControl will only use display: none on the inactive Tabs. 
            That means you can decide if you want a render-all solution or dynamic rendering of TabViews
            from the server
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TabControl.TabViews">
            <summary>
            The TabControl controls collection
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.TabControl.ScriptHelper">
            <summary>
            ScriptHelper is used only internally for a slightly cleaner syntax for setting css and content
            properties in the ClientAPI during SetPreRenderDefaults and SetActiveViewIndex
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.Window">
            <summary>
            The Gaia Ajax Window basically mimics the behaviour of a normal desktop Window. You can set it to be 
            Modal (through AspectModal), Closable, Movable, Resizable and mostly all other properties you'd expect 
            to get from a normal desktop Window.
            The Gaia Ajax %Window is a very rich Ajax Control. You can set properties for enabling and disabling resizing, 
            moving, closing, maximizing, minimizing and modality
            </summary>
            <example>
            <code title="ASPX Markup for Window" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\Window\Overview\Default.aspx"/>
            </code> 
            <code title="Codebehind for Window" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\Window\Overview\Default.aspx.cs"/>
            </code> 
            <code title="Recursively create Windows programatically" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\Window\Nested\Default.aspx.cs" region="Code"/>
            </code> 
            <code title="Enhance Window with Custom Effects" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Effects\Various\EnhancedWindow\Default.aspx.cs" region="Code"/>
            </code> 
            </example>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Window.ApplyToContent``1(``0)">
            <summary>
            Use this function to apply an effect to the content area of the Window. 
            </summary>
            <typeparam name="T">Any Effect</typeparam>
            <param name="effect">The Effect to apply modifications to</param>
            <returns>The effect itself. Don't forget to add the effect to the Window effects collection</returns>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Window.BringToFront">
            <summary>
            Programmatically bring the window to the front. 
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Window.OnLoad(System.EventArgs)">
            <summary>
            Overridden to create the AspectDraggable if needed (if Window is Draggable)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Window.CreateCompositionControls">
            <summary>
            Just making sure we add up our "special controls" like Close button, minimize, maximize etc.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Window.OnInit(System.EventArgs)">
            <summary>
            Initializing the Window
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Window.OnPreRender(System.EventArgs)">
            <summary>
            Last minute changing of attributes relevant to the client
            </summary>
            <param name="e">See base implementation</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Window.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the HTML for the Gaia Window into the given writer
            </summary>
            <param name="create">HtmlTextWriter to render into</param>
            <returns>HTML for a Gaia Window</returns>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Window.IncludeScriptFiles">
            <summary>
            Include Window Javascript files
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Window.SetPreRenderDefaults">
            <summary>
            Sets defaults for composition controls
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Window.RenderControlContents(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders Window's content
            </summary>
            <param name="create">XhtmlTagFactory for easy rendering</param>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.EffectEventMinimize">
            <summary>
            Minimize rules for hooking effects to the Window.Minimize event. 
            <example>
            Effects.Add(Window.Minimize, Window.ApplyToContent(new EffectBlindUp()));
            </example>
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.EffectEventAppear">
            <summary>
            Appear Effect rules for adding effects when the Window appear.  
            <example>
            Effects.Add(Window.Appear, new EffectGrow(ScriptaculousDirections.Center, ScriptaculousTransitions.Spring));
            </example>
            </summary>
            <remarks>
            Doesn't currently support EffectContainers like EffectQueue, EffectParallel. Use others instead
            </remarks>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.EffectEventRestoreAfterMinimize">
            <summary>
            Effect rules for applying an effect to the Window when it's restored after being minimized. 
            note: This effect will not fire when the Window is restored after being Maximized
            <example>
            Effects.Add(Window.RestoreAfterMinimize, Window.ApplyToContent(new EffectBlindDown()));
            </example>
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.EffectEventClose">
            <summary>
            Close Effect rules for adding effects to the Window when it's being Closed/Visible false. 
            <example>
            Effects.Add(Window.Close, new EffectShrink());
            </example>
            </summary>
            <remarks>
            Doesn't currently support EffectContainers like EffectQueue, EffectParallel. Use others instead
            </remarks>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Window.Closing">
            <summary>
            Event fired when window is being closed.
            Return false in WindowClosingEventArgs.ShouldClose if you need to stop the window from being closed.
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Window.Resized">
            <summary>
            Event fired when window has been resized.
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Window.Moved">
            <summary>
            Event fired when window has been moved.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.Animation">
            <summary>
            Defines the animation speed the Window will spend before fading into view when shown.
            If 0 it will not animate at all but instantly be shown on client
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.Modal">
            <summary>
            If set to true makes the control Modal with default values. If you want to override this behaviour
            just add your own AspectModal to the collection. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.OpacityWhenMoved">
            <summary>
            Defines the amount of transparency the window will have when it is moved. If this
            value is 0.0 the window will be completely IN-visible when moved, if 1.0 then window will
            not be semi-transparent at all when moved.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.Minimized">
            <summary>
            If true the window will be (intially) created in Minimzed mode
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.Maximized">
            <summary>
            If true the window will be (intially) created in Maximized mode
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.Minimizable">
            <summary>
            If this one is true the window can be minimized in such a sense that it will take up a very little portion of the height of the screen
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.Maximizable">
            <summary>
            If this one is true the window can be maximized in such a way that it will take up the whole visible parts of the screen
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.CenterInForm">
            <summary>
            True if the window should be centered in the browser window when made visible
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.Closable">
            <summary>
            True if the window should have a Close icon
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.Draggable">
            <summary>
            True if it should be possible to move the window around by dragging its bar
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.Resizable">
            <summary>
            True if the window should be resizable
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.MinWidth">
            <summary>
            This is the minimum width it will be possible to resize the window down to.
            Note this value is completely overlooked if the window has Resizable = false
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.MinHeight">
            <summary>
            This is the minimum height it will be possible to resize the window down to.
            Note this value is completely overlooked if the window has Resizable = false
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.Caption">
            <summary>
            This is the caption of the title bar of the window
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.IconCssClass">
            <summary>
            Set the CSS class to use for the icon which would normally be up and left on the widget
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.ScrollBars">
            <summary>
            Gets or sets the visibility and position of scroll bars in the window
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.Window.AspectClickableWithExpression">
            <summary>
            Special version of AspectClickable, provides "evaluate" parameter, which is:
            Expression to evaluate on the client to see IF server side event 
            should be raised when clicked. This is expected to be in the form of a "function expression" which 
            means you can write it like this; "function(){return false;}" in which case the server will NEVER be 
            called. The expression will be bound to the Aspect as an instance method meaning you can do stuff 
            like this to reach the containing widget; 
            "function(){return parseInt(this.getWrappedControl().element.style.zIndex, 10) != 1000}"
            the previous expression will only call the server if the parent widget of the aspect does not have 
            a z-index of exactly 1000. This parameter is mostly meant for CONTROL developers and if you feel 
            uncertain about any parts from the previous paragraph then you're probably better of WITHOUT
            using this feature of Gaia.
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.Window.WindowClosingEventArgs">
            <summary>
            Passed when a Gaia Window is being closed
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Window.WindowClosingEventArgs.ShouldClose">
            <summary>
            Set this one to false if you want to deny the user to actually close the window
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.Toolbar">
            <summary>
            The Gaia Ajax Toolbar (or Menu if you like) is a container with a collection of ToolbarItems which
            in turn can be as complex or as simple as you want them to be.
            You can add up any widget you like inside your Gaia Ajax Toolbar. Including Buttons, CheckBoxes, DateTimePickers 
            and even AutoCompleters and Repeaters if you want to. And everything is ajaxified automatically. Some of the 
            key features of the Gaia Ajax Toolbar is that it does its work and nothing more. It is small, works 100% fine 
            together with search engines and it is highly flexible. 
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Toolbar.CreateControlCollection">
            <summary>
            Overridden to get the correct collection type
            </summary>
            <returns>ToolbarItemCollection</returns>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Toolbar.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Render Toolbar
            </summary>
            <param name="create"></param>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Toolbar.ToolbarItems">
            <summary>
            The collection of ToolbarItems
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.TabView">
            <summary>
            One "sheet" in the TabControl widget.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TabView.CaptionImageCssClass">
            <summary>
            Icon for the TabView, defaults to "none".
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TabView.ScrollBars">
            <summary>
            Enable Scrollbars on the TabView
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TabView.Caption">
            <summary>
            Caption string of the TabView (the one that shows in the "switch to tabview button)
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.InPlaceEdit">
            <summary>
            The Gaia InPlaceEdit Control is normally displayed as a Label, but when the user clicks on it, the %Label 
            turns into a TextBox, to edit the displayed text.
            The InPlaceEdit is simply a Label that turns into a TextBox when the user clicks on it. When the user is done 
            editing the text, he/she can press enter or click somewhere else on the page to turn it back into a Label that displays 
            the new text. As it turns back into a Label it is animated, this animation, as well as other aspects of this control,
            is configurable. The InPlaceEdit is often used for inplace editing of fields meant to be readable at first but easily 
            editable, like for instance, in-place editing of a GridView or DataGrid cells.
            </summary>
            <example>
            <code title="ASPX Markup for InPlaceEdit" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\InPlaceEdit\Matrix\Default.aspx"/>
            </code> 
            <code title="Codebehind for InPlaceEdit" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\InPlaceEdit\Matrix\Default.aspx.cs"/>
            </code> 
            </example>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.InPlaceEdit.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overridden to support design-time rendering
            </summary>
            <param name="writer">HtmlTextWriter for rendering</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.InPlaceEdit.IncludeScriptFiles">
            <summary>
            Include InPlaceEdit Javascript files
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.InPlaceEdit.Highlight">
            <summary>
            Use this EffectEvent to wire up an effect to the highlight event of the control
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.InPlaceEdit.TextChanged">
            <summary>
            Event handler being called when text is saved on client!
            Note if you don't handle this event then the text will be passed (if changed) during the next Ajax callback
            no matter what type of event/callback that is
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.InPlaceEdit.Blink">
            <summary>
            Basically the width of the textarea object
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.InPlaceEdit.HasButtons">
            <summary>
            True if control has OK and Cancel buttons for saving. If this is false then loosing focus will save value
            and clicking escape will cancel edit operation.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.InPlaceEdit.SingleLine">
            <summary>
            True if this is a "single line" edit meaning Carriage Return will ACCEPT the 
            editing operation instead of starting a new line.
            Default value is false.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.InPlaceEdit.MouseClicksToTriggerEditMode">
            <summary>
            Specifies how the edit mode for the InPlaceEdit should be triggered, either by single left mouse click or double click
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.InPlaceEdit.MouseClickMode">
            <summary>
            Used in accordance with the MouseClicksToTriggerEditMode property to specify 
            SingleClick or DoubleClick for triggering the edit mode for the InPlaceEdit
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.InPlaceEdit.MouseClickMode.SingleClick">
            <summary>
            Specifies that the editing field will be visible through single-clicking the control
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.InPlaceEdit.MouseClickMode.DoubleClick">
            <summary>
            Specifies that the editing field will be visible through double-clicking the control.<br /><br />
            NOTE:<br />
            This one DOES NOT work in Opera out of the box, the user must go to: <br />
            Tools > Preferences > Advanced > Toolbars and uncheck "Double-click text to display context menu".
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.Accordion">
            <summary>
            The Accordion groups multiple ExtendedPanels with similar functionality where only one can be visible at one time.
            </summary>
            <example>
            <code title="ASPX Markup for Accordion" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\Accordion\Overview\Default.aspx"/>
            </code> 
            </example>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Accordion.CreateControlCollection">
            <summary>
            Overridden to get the correct collection type
            </summary>
            <returns>ExtendedPanelCollection</returns>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Accordion.OnInit(System.EventArgs)">
            <summary>
            Initializes extended panels with default settings
            </summary>
            <param name="e">Event Arguments</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Accordion.OnLoad(System.EventArgs)">
            <summary>
            Overridden from base to add up the Toggled event handler
            </summary>
            <param name="e">Event Arguments</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Accordion.OnPreRender(System.EventArgs)">
            <summary>
            Last minute changing of attributes relevant to the client
            </summary>
            <param name="e">See base implementation</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Accordion.SetPreRenderDefaults">
            <summary>
            Initializes the inner ExtendedPanels with common properties and hooks the events for the toggling
            If no caption is set a default one will be provided based on its position in the array.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Accordion.AddParsedSubObject(System.Object)">
            <summary>
            Initializes Parsed Sub Objects with default values
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Accordion.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
             <summary>
             Renders the Accordions one-by-one
             </summary>
            <param name="create"></param>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Accordion.Toggled">
            <summary>
            Occurs when Accordion is toggled.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Accordion.AnimationDuration">
            <summary>
            Duration of animation when shifting from expanded to collapsed mode
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Accordion.ForceOnlyOne">
            <summary>
            If true (default value) there can be only ONE Open ExtendedPanel at the time and the Accordion will
            force this in addition to that it will ALWAYS also have one Open Panel even though you programatically
            close all yourself. If false then you are in total control, but also this requires more gluing work on
            your behalf.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Accordion.ExtendedPanels">
            <summary>
            The collection of Accordions
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.TabViewCollection">
            <summary>
            The TabControl TabView Collection
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TabViewCollection.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor
            </summary>
            <param name="owner">ASP.Control</param>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.DateTimePicker">
            <summary>
            The DateTimePicker allows the user to select a certain date and time from wihtin a TextBox
            The Gaia Ajax DateTimePicker is extremely easy and flexible to use. For example, localization is done on the server, 
            meaning you have every localization option you have in the .Net Framework. It is also very lightweight and has very 
            little custom JavaScript written to make it work. It integrates perfectly with ASP.NET and is of course a 100% Ajax Citizen.
            </summary>
            <example>
            <code title="ASPX Markup for DateTimePicker" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\DateTimePicker\Overview\Default.aspx"/>
            </code> 
            <code title="Codebehind for DateTimePicker" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\DateTimePicker\Overview\Default.aspx.cs"/>
            </code> 
            </example>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.DateTimePicker.OnInit(System.EventArgs)">
            <summary>
            Initializing DateTimePicker
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.DateTimePicker.OnLoad(System.EventArgs)">
            <summary>
            Overriden to do special processing during OnLoad event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.DateTimePicker.OnPreRender(System.EventArgs)">
            <summary>
            Last minute changing of attributes relevant to the client
            </summary>
            <param name="e">See base implementation</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.DateTimePicker.SetPreRenderDefaults">
            <summary>
            Sets the Text property of the TextBox which displays the Value to the user if Value is not NULL
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.DateTimePicker.InitializeComponent">
            <summary>
            Initializes the composite controls ... 
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.DateTimePicker.ClonePosition">
            <summary>
            Positions the PanelCalendar directly beneath the Input textbox
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.DateTimePicker.Focus">
            <summary>
            Give focus to the input textbox
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.DateTimePicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.DateTimePicker.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Render the DateTimePicker Control HTML
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.DateTimePicker.TogglePicker">
            <summary>
            Toggles visibility of associated Calendar
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.CssClass">
            <summary>
            The cssclass for the Calendar control.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.Width">
            <summary>
            Get or Set the Width of the TextBox displaying the value
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.Draggable">
            <summary>
            Decide wheter you want the Calendar in the datetimepicker to be draggable.
            This value must be set before the Calendar is rendered.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.CalendarWidth">
            <summary>
            Get or Set the Width of the calendar picker. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.Enabled">
            <summary>
            Enable/Disable the DateTimePicker from UserEntry or opening the 
            Calendar. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.OpacityWhenMoved">
            <summary>
            Defines the amount of transparency the datetimepicker will have when it is moved. If this
            value is 0.0 the window will be completely IN-visible when moved, if 1.0 then it will
            not be semi-transparent at all when moved.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.Value">
            <summary>
            Get or Set the Selected DateTime. Not that to set this in .ASPX page
            you must use the ISO format and the Format property of the %DateTimePicker
            will not be used at all. Meaning use; "yyyy.MM.dd HH:mm" when setting
            this property. The Format property is only used for DISPLAYING the value back
            to the client.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.VisibleDate">
            <summary>
            The VisibleDate property is used to set the which month and year that will be visible initally if
            not the value is set.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.HasTimePart">
            <summary>
            Set this to enabled if you want to be able to select time in addition to date
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.Format">
            <summary>
            Basically the format from which the control should render its date in.
            It basically only supports yyyy for years, MM for months, dd for days, HH for hours in military format and mm for minutes.
            You cannot use long date formats like February or similar.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.Culture">
            <summary>
            Gets or set the Culture to be used in the DateTimePicker
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.FirstDayOfWeek">
            <summary>
            Specify which Date will be the first day displayed in the Calendar. By default this is Sunday. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.DateTimePicker.HasDropDownButton">
            <summary>
            If set to true will render the button right to the input textbox
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.DateTimePicker.SelectedDateChanged">
            <summary>
            The SelectedDateChanged event is fired on the DateTimePicker after the user has 
            performed a selection.
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.DateTimePicker.DayClicking">
            <summary>
            This event is fired just before the selection of a date occurs. You can subscribe
            to this event if you want to disallow selection of this date by setting the AllowSelection
            property to false
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.DateTimePicker.DayClicked">
            <summary>
            The DayClicked event is fired when a user clicks a specific day in the
            DateTimePicker and allows you to change the date before it's actually set.
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.DateTimePicker.DayRender">
            <summary>
            The DayRender event is fired for each DayTag that is created and allows you to 
            add custom CssClasses to each cell. 
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.ExtendedPanel">
            <summary>
            The Gaia Ajax %ExtendedPanel is inherited from Panel and offers a few more treats. It can be more easily 
            skinned, you can set a caption and it also supports Drag n'Drop, and Expand n'Collapse
            The %ExtendedPanel is a container widget which means it can have children controls. If you have an area on your webform which
            should for some reason be divided into its own logical space then the Gaia Ajax %Panel is a good candidate for such
            a logic. If you need extra capabilities like Expand and Collapse or Drag and Drop, then Gaia Ajax %ExtendedPanel is a perfect 
            choice. Think of it as an HTML div element with "Ajax Capabilities". Note that all of our "container widgets" have a special
            method called ForceAnUpdate which actually "transforms" them into partial rendering controls (for one Ajax Request only)
            which means that if you have other 3rd party (non-Ajax controls) into their child Controls collection then you can re-render
            those controls to and force them into becoming "ajax citizens". This is very useful for creating DataGrids and ajaxifying 
            "conventional" ASP.NET controls.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedPanel.ApplyToContent``1(``0)">
            <summary>
            Use this function to apply an effect to the content area of the Window. 
            </summary>
            <typeparam name="T">Any Effect</typeparam>
            <param name="effect">The Effect to apply modifications to</param>
            <returns>The effect itself. Don't forget to add the effect to the Window effects collection</returns>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedPanel.Toggle">
            <summary>
            Toggles the visibility of the content panel. uses animations if AnimationDuration is specified
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedPanel.OnInit(System.EventArgs)">
            <summary>
            Control Initialization
            </summary>
            <param name="e">The EventArgs passed on from the System</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedPanel.CreateCompositionControls">
            <summary>
            Called by the framework to notify server controls that use composition-based 
            implementation to create Composition Controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedPanel.OnPreRender(System.EventArgs)">
            <summary>
            The last step where we can manipulate the rendering of the control(s)/page before rendering occurs.
            </summary>
            <param name="e">EventArgs passed on from the system</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedPanel.SetPreRenderDefaults">
            <summary>
            Set defaults for composition controls
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedPanel.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the HTML of the panel
            </summary>
            <param name="create">Writer to render HTML into</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedPanel.RenderControlContents(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders ExtendedPanel's content.
            Used during initial rendering and ForceAnUpdate
            </summary>
            <param name="create">XhtmlTagFactory for easy rendering</param>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedPanel.Minimize">
            <summary>
            Use this EffectEvent to wire up an effect to the minimize action
            <example>
            Effects.Add(ExtendedPanel.Minimize, ExtendedPanel.ApplyToContent(new EffectBlindUp()));
            </example>
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedPanel.Restore">
            <summary>
            Use this EffectEvent to wire up an effect to the restore action
            <example>
            Effects.Add(ExtendedPanel.RestoreAfterMinimize, ExtendedPanel.ApplyToContent(new EffectBlindDown()));
            </example>
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.ExtendedPanel.Moved">
            <summary>
            Event fired when the panel is moved. 
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.ExtendedPanel.Toggled">
            <summary>
            This event fires if the Panel was successfully toggled.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedPanel.Caption">
            <summary>
            This is the caption of the title bar of the window
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedPanel.AnimationDuration">
            <summary>
            Duration of animation when shifting from expanded to collapsed mode
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedPanel.Draggable">
            <summary>
            True if it should be possible to move the window around by dragging its bar
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedPanel.CanBeToggled">
            <summary>
            Decides wheter the panel has an "expand/collapse" icon to expand and collapse
            the surface of the Panel.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedPanel.Collapsed">
            <summary>
            Should the ExtendedPanel be collapsed or expanded initially. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedPanel.IconCssClass">
            <summary>
            Set the CSS class to use for the icon which would normally be up and left on the widget
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedPanel.ScrollBars">
            <summary>
            Enable Scrollbars on the ExtendedPanel
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.ExtendedButton">
            <summary>
            The Gaia Ajax %ExtendedButton is based on Gaia Button and adds support for Toggling, Image and 
            various size and position settings. It is highly skinnable, flexible and renders very lightweight XHTML
            and conforms to all accepted web standards like XHTML and so on. 
            <br/>
            </summary>
            <example>
            <code title="ASPX Markup for ExtendedButton" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\ExtendedButton\Overview\Default.aspx"/>
            </code> 
            <code title="Codebehind for ExtendedButton" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\ExtendedButton\Overview\Default.aspx.cs"/>
            </code> 
            </example>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedButton.IncludeScriptFiles">
            <summary>
            Include ExtendedButton Javascript files
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ExtendedButton.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the ExtendedButton
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedButton.Toggled">
            <summary>
            Is the Button Toggled
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ExtendedButton.ImageCssClass">
            <summary>
            Button Image
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.Slider">
            <summary>
            The Gaia Ajax Slider allows you to drag a handle and drop it to set the sliders value. 
            The Gaia Ajax Slider is used to represent a numeric value in the range from 0 to 100. It has a handle that
            you can drag back and forth then drop to set the Value of the %Slider.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Slider.CreateChildControls">
            <summary>
            Adds up the custom controls to the controls collection of this control. 
            Required to fire events properly. 
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Slider.OnInit(System.EventArgs)">
            <summary>
            Initializing Control
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Slider.OnLoad(System.EventArgs)">
            <summary>
            Overriden to ensure ChildControls in the composition control. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Slider.OnPreRender(System.EventArgs)">
            <summary>
            Used to set default "last minute" values
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Slider.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Renders the Sliders HTML properly. 
            </summary>
            <param name="create">XhtmlTagFactory passed from caller</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.Slider.SetPreRenderDefaults">
            <summary>
            Set defaults for composition controls
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.Slider.ValueChanged">
            <summary>
            The ValueChanged Event is raised whenever the Value gets changed. Either by the user dragging
            and dropping the handle or by setting the Value property directly in code. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Slider.DisplayDirection">
            <summary>
            Rendering Direction for the Slider, default is Horizontal
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Slider.BorderSize">
            <summary>
            Override this if you've got skins that have another width of the "outer parts" to help the
            dragger know which offset values are its borders
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.Slider.Value">
            <summary>
            Slider Value. Can range from 0 to 100. 
            Changing the value will raise the ValueChanged event.
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.Slider.Direction">
            <summary>
            Enumeration for direction the Slider is being rendered
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.Slider.Direction.Horizontal">
            <summary>
            Horizontal direction
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.Slider.Direction.Vertical">
            <summary>
            Verical direction
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.CalendarWithTimePart">
            <summary>
            The CalendarWithTimePart extends the Calendar with a Time picker. 
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.CalendarWithTimePart._hourInput_TextChanged(System.Object,System.EventArgs)">
            <summary>
            This Event is fired every time the hour textbox has changes and it tries to parse the text
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.CalendarWithTimePart._minuteInput_TextChanged(System.Object,System.EventArgs)">
            <summary>
            This Event is fired every time the minute textbox has changes and tries to parse the text. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.CalendarWithTimePart.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based 
            implementation to create any child controls they contain in preparation for posting back or 
            rendering.
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.CalendarWithTimePart.OnInit(System.EventArgs)">
            <summary>
            Initializing the Calendar with TimePart
            </summary>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.CalendarWithTimePart.RenderCalendarBottom(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Here we override the RenderCalendarBottom and inject another row into the table.
            The TimePicker is only rendered if HasTimePart is set to true. 
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.CalendarWithTimePart.UpdateTimePart">
            <summary>
            Updates the input textbox for hour/minute
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.CalendarWithTimePart.Hour">
            <summary>
             Helper property which gets the Hour from the textbox
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.CalendarWithTimePart.Minute">
            <summary>
            Helper property to retrieve the minute from the textbox
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.CalendarWithTimePart.HasTimePart">
            <summary>
            Set this to enabled if you want to be able to select time in addition to date
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.ToolbarItem">
            <summary>
            A toolbar item can be thought of as a combination between a menu items and a toolbar composite control.
            Inside the ToolbarItem you can add any controls you wish and all of them will be "initially visible"
            except for other ToolbarItems which will be put into another container which will be rendered intially IN-visible.
            Then when you click the ToolbarItem the child controls of type ToolbarItems will be shown
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ToolbarItem.ApplyToContent``1(``0)">
            <summary>
            Use this function to apply an effect to the content area of the ToolbarItem
            </summary>
            <typeparam name="T">Any Effect</typeparam>
            <param name="effect">The Effect to apply modifications to</param>
            <returns>The effect itself. Don't forget to add the effect to the Window effects collection</returns>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ToolbarItem.Close">
            <summary>
            Closes the ToolbarItem if it is expanded
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ToolbarItem.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overridden to render "li" element instead of "span" element in cases of in-visibility
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ToolbarItem.IncludeScriptFiles">
            <summary>
            Include ToolbarItem Javascript files
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.ToolbarItem.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Overridden from Panel to render the specific ToolbarItem HTML
            </summary>
            <param name="create">XhtmlTagFactory to render into</param>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ToolbarItem.ShowChildren">
            <summary>
            Use this EffectEvent to wire up the effect when the ToolbarItem displays its children
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ToolbarItem.HideChildren">
            <summary>
            Use this EffectEvent to wire up the effect when the Toolbaritem hides its children
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ToolbarItem.CloseIfClicked">
            <summary>
            If this is true (default value) the ToolbarItem will "close" when it is being clicked.
            For some widgets which can be contained inside a ToolbarItem this behavior might be
            a bit confusing since it basically makes it impossible to e.g. embed DateTimePickers and 
            AutoCompleters etc inside a ToolbarItem. If so then set this value to false.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ToolbarItem.DropMethod">
            <summary>
            Choose which type of User Interaction you wish for this ToolbarItem to drop down and
            show its Child ToolbarItems
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ToolbarItem.Animation">
            <summary>
            Method to animate the sub menu items, defaults to "None"
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ToolbarItem.IconCssClass">
            <summary>
            Sets a CSS class used for displaying an icon for the ToolbarItem
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ToolbarItem.ToolbarItems">
            <summary>
            This collection contains all the Child ToolbarItems in this ToolbarItem. Use this collection instead
            of the Controls collection to access your ToolbarItems. It's safe to call AddAt, RemoveAt and Clear on 
            this controls collection. If you need to access your custom user defined controls on the ToolbarItem
            use the ChildControls collection instead. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.ToolbarItem.ChildControls">
            <summary>
            This collection contains all your user defined controls and not the child ToolbarItems. This control works as 
            an abstraction on top of the Controls collection, but you should use this collection instead for secure access.
            If you need to access your ToolbarItems please use the ToolbarItems collection.  
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.ToolbarItem.DropDownMethod">
            <summary>
            Activity that should trigger a drop-down of the child menu items
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.ToolbarItem.DropDownMethod.Hover">
            <summary>
            Mouse hovers over
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.ToolbarItem.DropDownMethod.Click">
            <summary>
            Single click with left mouse button
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.ToolbarItem.AnimationMethod">
            <summary>
            How to animate the ToolbarItem when whosing it
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.ToolbarItem.AnimationMethod.None">
            <summary>
            Will only show the ToolbarItem directly without any animations
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.ToolbarItem.AnimationMethod.Fade">
            <summary>
            Will fade in and out the ToolbarItem
            </summary>
        </member>
        <member name="F:Gaia.WebWidgets.Extensions.ToolbarItem.AnimationMethod.Blind">
            <summary>
            Will blind down and up the ToolbarItem
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.AutoCompleter">
            <summary>
            <para>The Gaia Ajax AutoCompleter allows the user to type in a query into a TextBox and a list of items
            that satisfy this query according to your code will appear, from which the user can select an item.
            The Gaia Ajax AutoCompleter is extremely rich, flexible and versatile. You can add up complex Ajax Controls 
            into its items collection and everything will "just work". The user types in a query into a TextBox then 
            you can fill the AutoCompleterItems controls collection with items from a server-side event handler, when the 
            user selects a control (item), you will get access to the control through the SelectedValue property.</para>
            <para> User selection is being done with the arrow keys in addition to that the user can use Up, Down, Page Up or 
            Page Down to scroll 5 items at the time or even Home and End to go to the top or the bottom of the list.</para>
            </summary>
            <example>
            <code title="ASPX Markup for AutoCompleter" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\AutoCompleter\Overview\Default.aspx"/>
            </code> 
            <code title="Codebehind for AutoCompleter" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\AutoCompleter\Overview\Default.aspx.cs"/>
            </code> 
            </example>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.AutoCompleter.Focus">
            <summary>
            Gives focus to the autocompleter input box
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.AutoCompleter.OnInit(System.EventArgs)">
            <summary>
            Initializing the Autocompleter
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.AutoCompleter.OnLoad(System.EventArgs)">
            <summary>
            We override OnLoad to make sure the children are repopulated properly. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.AutoCompleter.CreateChildControls">
            <summary>
            CreateChildControls adds the parts of the CompositeControl to the Controls collection
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.AutoCompleter.InitializeComponent">
            <summary>
            Initialize autocompleter properties and events
            </summary>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.AutoCompleter.OnPreRender(System.EventArgs)">
            <summary>
            Add up last minute property changes ... 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.AutoCompleter.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Render the Control itself
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.AutoCompleter.Closing">
            <summary>
            This event is fired just before the Autocompleter will be closed.
            The consumer can decide wheter or not to close the window
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.AutoCompleter.GetAutoCompleterItems">
            <summary>
            This event is fired when the AutoCompleter needs to be populated
            Populate the AutoCompleterItems collection ...
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.AutoCompleter.SelectionChanged">
            <summary>
            This event is fired when the user selects something. Access
            the value from the SelectedValue property. 
            note:  Since the AutoCompleter relies on dynamic control creation, you should store
            the SelectedValue in your own code
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.AutoCompleter.Clicked">
            <summary>
            This event is fired when the user clicks into the AutoCompleter
            Can be useful if you need to clear the input textbox or do something else
            </summary>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.AutoCompleter.Blur">
            <summary>
            Event fires when the AutoCompleter input textbox looses focus
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.AutoCompleter.AutoCompleterItems">
            <summary>
            AutoCompleterItems ControlCollection. 
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.AutoCompleter.SelectedValue">
            <summary>
            Returns the SelectedValue that the user selected. Is only available immediately 
            after the user selects something from the AutoCompleter.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.AutoCompleter.Text">
            <summary>
            Text written into the autocompleter
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.AutoCompleter.Width">
            <summary>
            Width of the Autocompleter
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.AutoCompleter.Height">
            <summary>
            Height of the Autocompleter
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.AutoCompleter.CssClass">
            <summary>
            CssClass
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.AutoCompleter.KeyChangeEventsInterval">
            <summary>
            Specify how often you want to poll the server after new text is written into
            the textbox.
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.AutoCompleter.AutoCompleterClosingEventArgs">
            <summary>
            Passed when the Gaia AutoCompleter is being closed
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.AutoCompleter.AutoCompleterClosingEventArgs.ShouldClose">
            <summary>
            Check to see if you want to deny the user closing the AutoCompleter
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.AutoCompleter.AutoCompleterSelectionChangedEventArgs">
            <summary>
            Passed when the user selects an item in the AutoCompleter. 
            Contains the SelectedValue.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.AutoCompleter.AutoCompleterSelectionChangedEventArgs.SelectedValue">
            <summary>
            The Control that the user selected in the AutoCompleter.
            May contain null values.
            </summary>
        </member>
        <member name="T:Gaia.WebWidgets.Extensions.TreeView">
            <summary>
            The Gaia Ajax TreeView is our version of the TreeView control made popular in the Common Controls from Windows. As 
            you can see from the screen shot, it's a pretty flexible and useful control.
            The Gaia Ajax TreeView Control is extremely flexible and powerful, yet very intuitive and easy to use. You can 
            combine static items with dynamic items as you wish. Static items are rendered as part of the HTML output of the 
            page (if the TreeView is visible from the start) and dynamic items are retrieved on a "need basis". This means 
            the TreeView will be very useful for both visibility in navigations if you like, while at the same time very 
            efficient on bandwidth usage up front. The TreeView is very easy to skin since it uses ul and li elements and 
            it is also 100% XHTML compliant. It also has perfect support for accessibility.
            </summary>
            <example>
            <code title="ASPX Markup for TreeView" lang="C#"> 
            <code source="..\Gaia.WebWidgets.Samples\Extensions\TreeView\Overview\Default.aspx"/>
            </code> 
            </example>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeView.AddedControl(System.Web.UI.Control,System.Int32)">
            <summary>
            Called after a child control is added to the Controls collection
            </summary>
            <param name="control">The Control that was added</param>
            <param name="index">The index of Control in the collection</param>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeView.CreateControlCollection">
            <summary>
            Overridden to get the correct collection type
            </summary>
            <returns>TreeViewItemCollection</returns>
        </member>
        <member name="M:Gaia.WebWidgets.Extensions.TreeView.RenderControlHtml(Gaia.WebWidgets.HtmlFormatting.XhtmlTagFactory)">
            <summary>
            Render TreeView
            </summary>
            <param name="create"></param>
        </member>
        <member name="E:Gaia.WebWidgets.Extensions.TreeView.NodeSelected">
            <summary>
            Fired when a node is selected in the TreeView.
            Use the SelectedNode property to find out which node was selected.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeView.TreeStyle">
            <summary>
            Styles of TreeView items rendering in TreeView
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeView.AnimateToggling">
            <summary>
            If true (defaults to true) then nodes will be "animated" up and down on the client-side
            when expanded and collapsed. This can be overridden for specific TreeViewItem nodes though 
            which then takes presedence.
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeView.TreeViewItems">
            <summary>
            The collection of TreeViewItems
            </summary>
        </member>
        <member name="P:Gaia.WebWidgets.Extensions.TreeView.SelectedNode">
            <summary>
            Returns the currently selected node in the TreeView, might return NULL
            </summary>
        </member>
    </members>
</doc>
